import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mohalla_bazaar/modules/authentication_app/domain/usecases/login_usecase.dart';
import 'login_event.dart';
import 'login_state.dart';

/// ===============================
/// LoginBloc
/// ===============================
/// Bloc = Business Logic Component
/// üëâ ‡§Ø‡§π Bloc user ‡§ï‡•á login actions (events) ‡§ï‡•ã handle ‡§ï‡§∞‡§§‡§æ ‡§π‡•à,
/// ‡§î‡§∞ ‡§â‡§®‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§®‡§Ø‡§æ state (UI ‡§ï‡•Ä current ‡§∏‡•ç‡§•‡§ø‡§§‡§ø) emit ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
class LoginBloc extends Bloc<LoginEvent, LoginState> {
  /// Bloc ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ login ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
  /// ‡§π‡§Æ‡•á‡§Ç UseCase ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à (Clean Architecture rule)
  /// üëâ Bloc ‡§∏‡•Ä‡§ß‡•á API call ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§
  /// LoginUseCase dependency injection ‡§∏‡•á ‡§™‡§æ‡§∏ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
  final LoginUseCase loginUseCase;

  /// Constructor
  /// super(const LoginState()) ‚Üí Bloc ‡§ï‡§æ initial state ‡§∏‡•á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (initial)
  /// on LoginSubmitted (_onLoginSubmitted) ‚Üí
  /// Bloc ‡§ï‡•ã ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ö‡§ó‡§∞ "LoginSubmitted" event ‡§Ü‡§è‡§ó‡§æ,
  /// ‡§§‡•ã ‡§â‡§∏‡•á "_onLoginSubmitted" method ‡§∏‡•á handle ‡§ï‡§∞‡•ã‡•§
  LoginBloc(this.loginUseCase) : super(const LoginState()) {
    on<LoginSubmitted>(_onLoginSubmitted);
  }

  /// ===============================
  /// Event Handler: _onLoginSubmitted
  /// ===============================
  /// ‡§Ø‡§π function ‡§§‡§¨ call ‡§π‡•ã‡§ó‡§æ ‡§ú‡§¨ UI ‡§∏‡•á LoginSubmitted event ‡§Ü‡§è‡§ó‡§æ‡•§
  /// e.g. User ‡§®‡•á email+password ‡§≠‡§∞‡§ï‡§∞ login button ‡§¶‡§¨‡§æ‡§Ø‡§æ‡•§
  Future<void> _onLoginSubmitted(
    LoginSubmitted event,     // Event object: ‡§á‡§∏‡§Æ‡•á‡§Ç user ‡§ï‡§æ email ‡§î‡§∞ password ‡§π‡•ã‡§§‡§æ ‡§π‡•à
    Emitter<LoginState> emit, // emit() = ‡§®‡§Ø‡§æ state ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ
  ) async {
    // Step 1: ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á UI ‡§ï‡•ã ‡§¨‡§§‡§æ‡§ì ‡§ï‡§ø "loading" ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à‡•§
    // ‡§§‡§æ‡§ï‡§ø UI spinner/progress bar ‡§¶‡§ø‡§ñ‡§æ ‡§∏‡§ï‡•á‡•§
    emit(state.copyWith(
      status: LoginStatus.loading,
      error: null,   // error reset ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§§‡§æ‡§ï‡§ø ‡§™‡•Å‡§∞‡§æ‡§®‡§æ error ‡§® ‡§¶‡§ø‡§ñ‡•á
    ));

    // Step 2: LoginUseCase call ‡§ï‡§∞‡•ã (actual login logic ‡§Ø‡§π‡§æ‡§Å ‡§π‡•ã‡§ó‡§æ)
    // üëâ loginUseCase API call ‡§ï‡§∞‡•á‡§ó‡§æ ‡§î‡§∞ result ‡§¶‡•á‡§ó‡§æ‡•§
    // Result ‡§ï‡§æ type ‡§π‡•à: Either<Failure, LoginResult>
    final result = await loginUseCase(
      email: event.email,      // event ‡§∏‡•á ‡§Ü‡§Ø‡§æ email
      password: event.password // event ‡§∏‡•á ‡§Ü‡§Ø‡§æ password
    );

    // Step 3: Result handle ‡§ï‡§∞‡•ã
    // fold() = functional ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§π‡•à result ‡§ï‡•ã handle ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ‡•§
    // Either type ‡§π‡§Æ‡•á‡§∂‡§æ ‡§¶‡•ã possibilities ‡§¶‡•á‡§§‡§æ ‡§π‡•à:
    // - Left  = Failure (error case)
    // - Right = Data (success case)
    result.fold(
      // ‚ùå ‡§Ö‡§ó‡§∞ Failure ‡§Æ‡§ø‡§≤‡§æ (‡§ú‡•à‡§∏‡•á network error, wrong password, server error):
      (failure) => emit(
        state.copyWith(
          status: LoginStatus.failure,  // state ‡§ï‡•ã failure ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡§ø‡§Ø‡§æ
          error: failure.message,       // UI ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è error message ‡§™‡§æ‡§∏ ‡§ï‡§ø‡§Ø‡§æ
        ),
      ),

      // ‚úÖ ‡§Ö‡§ó‡§∞ Success ‡§Æ‡§ø‡§≤‡§æ (login successful, data ‡§Æ‡§ø‡§≤‡§æ):
      (data) => emit(
        state.copyWith(
          status: LoginStatus.success, // state ‡§ï‡•ã success ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡§ø‡§Ø‡§æ
          data: data,                  // data (LoginResult object) UI ‡§ï‡•ã ‡§™‡§æ‡§∏ ‡§ï‡§ø‡§Ø‡§æ
        ),
      ),
    );
  }
}
