import 'package:equatable/equatable.dart';
import 'package:mohalla_bazaar/modules/auth/domain/entities/login_result.dart';

/// ===============================
/// LoginStatus Enum
/// ===============================
/// Enum ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à "‡§∏‡§Ç‡§≠‡§µ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü"
/// Login process ‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´ 4 ‡§π‡•Ä ‡§π‡§æ‡§≤‡§æ‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:
/// 1. initial  ‚Üí ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç, user ‡§®‡•á ‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ
/// 2. loading  ‚Üí Login request ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à (waiting)
/// 3. success  ‚Üí Login ‡§∏‡§´‡§≤ ‡§π‡•Å‡§Ü (user ‡§ï‡•ã data ‡§Æ‡§ø‡§≤‡§æ)
/// 4. failure  ‚Üí Login fail ‡§π‡•Å‡§Ü (error ‡§Ü‡§Ø‡§æ)
///
/// Example: ‡§∏‡•ã‡§ö‡•ã canteen ‡§Æ‡•á‡§Ç ‡§¨‡§ö‡•ç‡§ö‡§æ ‡§ñ‡§°‡§º‡§æ ‡§π‡•à
/// - initial = ‡§¨‡§ö‡•ç‡§ö‡§æ counter ‡§™‡§∞ ‡§ñ‡§°‡§º‡§æ ‡§π‡•à
/// - loading = ‡§¶‡•Å‡§ï‡§æ‡§®‡§¶‡§æ‡§∞ ‡§∏‡§Æ‡•ã‡§∏‡§æ ‡§™‡•à‡§ï ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à
/// - success = ‡§¨‡§ö‡•ç‡§ö‡§æ ‡§∏‡§Æ‡•ã‡§∏‡§æ ‡§ñ‡§æ ‡§∞‡§π‡§æ ‡§π‡•à üòã
/// - failure = ‡§¶‡•Å‡§ï‡§æ‡§®‡§¶‡§æ‡§∞ ‡§¨‡•ã‡§≤‡§æ "‡§∏‡§Æ‡•ã‡§∏‡§æ ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã ‡§ó‡§Ø‡§æ"
enum LoginStatus { initial, loading, success, failure }

/// ===============================
/// LoginState Class
/// ===============================
/// State = UI ‡§ï‡§æ "current ‡§π‡§æ‡§≤"
/// Bloc ‡§π‡§∞ ‡§¨‡§æ‡§∞ ‡§®‡§Ø‡§æ state emit ‡§ï‡§∞‡•á‡§ó‡§æ ‡§î‡§∞ UI ‡§â‡§∏‡•Ä ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§¨‡§¶‡§≤‡•á‡§ó‡§æ‡•§
class LoginState extends Equatable {
    /// ‡§Ö‡§≠‡•Ä ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø (initial/loading/success/failure)
  final LoginStatus status;
  /// ‡§Ö‡§ó‡§∞ login successful ‡§π‡•Å‡§Ü ‡§§‡•ã data ‡§Ü‡§è‡§ó‡§æ
  /// ‡§ú‡•à‡§∏‡•á server ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§æ token ‡§Ø‡§æ user info
  final LoginResult? data;
    /// ‡§Ö‡§ó‡§∞ login fail ‡§π‡•Å‡§Ü ‡§§‡•ã ‡§Ø‡§π‡§æ‡§Å error message store ‡§π‡•ã‡§ó‡§æ
  final String? error;
 /// Constructor
  /// Default status = initial (‡§Æ‡§§‡§≤‡§¨ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç form ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à)
  const LoginState({
    this.status = LoginStatus.initial,
    this.data,
    this.error,
  });
  /// copyWith Method
  /// State immutable (‡§¨‡§¶‡§≤‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ) ‡§π‡•ã‡§§‡§æ ‡§π‡•à
  /// ‡§®‡§Ø‡§æ state ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è copyWith ‡§ï‡§æ use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
  /// Example:
  ///   state.copyWith(status: LoginStatus.loading)
  /// ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:
  ///   ‡§®‡§Ø‡§æ state ‡§¨‡§®‡§æ‡§ì ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´ status ‡§¨‡§¶‡§≤‡§æ ‡§π‡•ã,
  ///   ‡§¨‡§æ‡§ï‡•Ä values (data, error) same ‡§∞‡§π‡•á‡§Ç‡•§
  LoginState copyWith({
    LoginStatus? status,
    LoginResult? data,
    String? error,
  }) {
    return LoginState(
      status: status ?? this.status, // ‡§Ö‡§ó‡§∞ ‡§®‡§Ø‡§æ status ‡§®‡§π‡•Ä‡§Ç ‡§¶‡§ø‡§Ø‡§æ ‡§§‡•ã ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§π‡•Ä use ‡§π‡•ã‡§ó‡§æ
      data: data ?? this.data,       // success data
      error: error,  // ‡§®‡§Ø‡§æ error override ‡§ï‡§∞‡•á‡§ó‡§æ (null ‡§≠‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à)
    );
  }
  /// Equatable ‡§ï‡§æ ‡§´‡§æ‡§Ø‡§¶‡§æ:
  /// ‡§¶‡•ã states ‡§ï‡•ã compare ‡§ï‡§∞‡§®‡§æ ‡§Ü‡§∏‡§æ‡§® ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à
  /// e.g. ‡§Ö‡§ó‡§∞ status, data, error same ‡§π‡•à‡§Ç ‡§§‡•ã ‡§¶‡•ã‡§®‡•ã‡§Ç states equal ‡§π‡•ã‡§Ç‡§ó‡•á
  @override
  List<Object?> get props => [status, data, error];
}
